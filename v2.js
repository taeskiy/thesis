require('dotenv').config();
const mysql = require('mysql');
const { Telegraf, Markup } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const localSession = new LocalSession({ database: 'session_db.json' });

bot.use(localSession.middleware());

const pool = mysql.createPool({
  host: 'narynivq.beget.tech',
  user: 'narynivq_evion',
  password: 'Qwerty123',
  database: 'narynivq_evion',
});

const itemsPerRow = 3;
const itemsPerPage = 3;

function chunkArray(arr, chunkSize) {
  const result = [];
  for (let i = 0; i < arr.length; i += chunkSize) {
    result.push(arr.slice(i, i + chunkSize));
  }
  return result;
}

function getLocationMenuButtons(page) {
  return new Promise((resolve, reject) => {
    pool.getConnection((err, connection) => {
      if (err) {
        reject(err);
        return;
      }

      connection.query('SELECT * FROM ChargingStations', (error, results) => {
        connection.release();
        if (error) {
          reject(error);
          return;
        }

        const startIndex = page * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const slicedLocations = results.slice(startIndex, endIndex);

        const locationButtons = chunkArray(
          slicedLocations.map((location) => [
            Markup.button.callback(location.name, `location_${location.station_id}`)
          ]),
          itemsPerRow
        );

        const navigationButtons = [];

        if (page > 0) {
          navigationButtons.push(Markup.button.callback('–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ ‚è™', 'previous'));
        }

        if (endIndex < results.length) {
          navigationButtons.push(Markup.button.callback('–ï—â—ë —Å—Ç–∞–Ω—Ü–∏–∏ ‚è©', 'next'));
        }

        resolve([
          ...locationButtons.flat(),
          navigationButtons,
          [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤', 'main_menu')],
        ]);
      });
    });
  });
}

function showMainMenu(ctx) {
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
    reply_markup: {
      keyboard: [
        ['–õ–æ–∫–∞—Ü–∏–∏ üó∫Ô∏è'],
        ['–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è'],
        ['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã üïë'],
        ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'],
      ],
      resize_keyboard: true,
    },
  });
}

function showLocationMenu(ctx, page) {
  getLocationMenuButtons(page)
    .then((buttons) => {
      const replyMarkup = {
        inline_keyboard: buttons,
      };

      if (ctx.update.callback_query) {
        ctx.editMessageReplyMarkup(replyMarkup)
          .catch((err) => {
            if (err.response.description !== 'Bad Request: message is not modified') {
              console.error(err);
            }
          });
      } else {
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:', { reply_markup: replyMarkup });
      }
    })
    .catch((err) => {
      console.error(err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
}

function showReservationMenu(ctx) {
  const buttons = [
    [Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏', 'show_stations')],
    [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'create_reservation')],
    // Add more buttons as needed
  ];

  ctx.reply('–ú–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
    reply_markup: {
      inline_keyboard: buttons,
    },
  });
}

bot.command('start', (ctx) => {
  showMainMenu(ctx);
});

bot.on('text', (ctx) => {
  const text = ctx.message.text;

  if (text === '–õ–æ–∫–∞—Ü–∏–∏ üó∫Ô∏è') {
    ctx.session.page = 0;
    showLocationMenu(ctx, 0);
  } else if (text === '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤') {
    showMainMenu(ctx);
  } else if (text === '–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è') {
    ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n+996 (500) 333-351\nevionkg@gmail.com\nhttps://evion.kg/about');
  } else if (text === '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã üïë') {
    ctx.reply('11:00 –¥–æ 23:00\n—Å 11:00 –¥–æ 01:00 –ø—Ç-—Å–±\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç: https://evion.kg');
  } else if (text === '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å') {
    showReservationMenu(ctx);
  }
});

bot.action(/location_(.+)/, (ctx) => {
  const locationId = ctx.match[1];

  pool.getConnection((err, connection) => {
    if (err) {
      console.error(err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    connection.query('SELECT * FROM ChargingStations WHERE station_id = ?', [locationId], (error, results) => {
      connection.release();
      if (error) {
        console.error(error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      if (results.length === 0) {
        ctx.reply('–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      const location = results[0];
      ctx.reply(`–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: ${location.name}`)
        .then(() => {
          ctx.telegram.sendLocation(ctx.chat.id, location.latitude, location.longitude);
          showLocationMenu(ctx, ctx.session.page);
        })
        .catch((err) => {
          console.error(err);
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        });
    });
  });
});

bot.action('show_stations', (ctx) => {
  // Fetch and display the available stations
  pool.getConnection((err, connection) => {
    if (err) {
      console.error(err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    connection.query('SELECT * FROM ChargingStations WHERE station_id NOT IN (SELECT DISTINCT charger_id FROM ChargeHistory)', (error, results) => {
      connection.release();
      if (error) {
        console.error(error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      if (results.length === 0) {
        ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.');
        return;
      }

      const stationNames = results.map((station) => station.name).join('\n');
      ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏:\n${stationNames}`);
    });
  });
});

bot.action('create_reservation', (ctx) => {
  // Handle create reservation logic here
  ctx.reply('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º!');
});

bot.action('previous', (ctx) => {
  const currentPage = ctx.session.page || 0;
  const newPage = Math.max(currentPage - 1, 0);
  ctx.session.page = newPage;
  showLocationMenu(ctx, newPage);
});

bot.action('next', (ctx) => {
  const currentPage = ctx.session.page || 0;
  const newPage = currentPage + 1;
  ctx.session.page = newPage;
  showLocationMenu(ctx, newPage);
});

bot.action('main_menu', (ctx) => {
  showMainMenu(ctx);
});

bot.command('location', (ctx) => {
    ctx.session.page = 0;
    showLocationMenu(ctx, ctx.session.page);
  });
bot.launch();

console.log('–ë–æ—Ç –¥–ª—è –ª–æ–∫–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é Telegraf –∏ –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω...')
